---
import { SEO } from 'astro-seo';
import '../styles/global.css';
import { base } from '../utils/constants';
import Breadcrumb from '../components/Breadcrumb.astro';
import Search from '../components/Search.jsx';

interface Props {
  title?: string;
  description?: string;
  breadcrumbItems?: Array<{
    title: string;
    url: string;
    isCurrent?: boolean;
  }>;
}

const { 
  title = "Chizubo's Essays and Research",
  description = "A collection of essays on technology, science, and philosophy.",
  breadcrumbItems = []
} = Astro.props;

// JavaScript/TypeScript code here (imports, props, etc.)
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title,
          type: "website",
          image: "/og-image.png"
        }
      }}
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
    <!-- Header -->
    <div class="relative w-full">
      <div class="container max-w-4xl mx-auto px-4 py-8">
        <header class="mb-8">
          <nav class="flex justify-between items-center">
            <a href={`${base}/`} class="site-title text-2xl font-bold">chizubo</a>
            <div class="nav-links flex gap-4 items-center">
              <Search client:load base={base} />
              <a href={`${base}essays`} class="nav-link hover:text-gray-600 dark:hover:text-gray-300">Essays</a>
              <a href={`${base}about`} class="nav-link hover:text-gray-600 dark:hover:text-gray-300">About</a>
              <a href={`${base}recs`} class="nav-link hover:text-gray-600 dark:hover:text-gray-300">Recs</a>
            </div>
          </nav>
        </header>
      </div>
      <!-- Gear icon fixed to the far right -->
      <div class="fixed top-8 right-8 z-50 flex flex-col items-center">
        <button id="settings-toggle" class="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700" aria-label="Settings">
          <img src={`${base}gear-icon.svg`} alt="Settings" class="h-6 w-6" />
        </button>
        <div id="settings-dropdown" class="hidden flex flex-col items-center mt-2 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 w-12 py-2">
          <div class="flex flex-col items-center gap-2">
            <div class="relative group">
              <button id="theme-auto" aria-label="Auto Light/Dark" class="flex items-center justify-center w-8 h-8 rounded hover:bg-gray-100 dark:hover:bg-gray-800">
                <img src={`${base}default-theme.svg`} alt="Auto" class="h-5 w-5" />
              </button>
              <span class="settings-tooltip group-hover:opacity-100">Auto Light/Dark</span>
            </div>
            <div class="relative group">
              <button id="theme-light" aria-label="Light" class="flex items-center justify-center w-8 h-8 rounded hover:bg-gray-100 dark:hover:bg-gray-800">
                <img src={`${base}light-theme.svg`} alt="Light" class="h-5 w-5" />
              </button>
              <span class="settings-tooltip group-hover:opacity-100">Light</span>
            </div>
            <div class="relative group">
              <button id="theme-dark" aria-label="Dark" class="flex items-center justify-center w-8 h-8 rounded hover:bg-gray-100 dark:hover:bg-gray-800">
                <img src={`${base}dark-theme.svg`} alt="Dark" class="h-5 w-5" />
              </button>
              <span class="settings-tooltip group-hover:opacity-100">Dark</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Breadcrumb - Full Width -->
    {breadcrumbItems.length > 0 && <Breadcrumb items={breadcrumbItems} />}

    <!-- Main Content -->
    <div class="container max-w-4xl mx-auto px-4 pb-8">
        <main class="content prose dark:prose-invert max-w-none">
          <slot />
        </main>

        <footer class="site-footer mt-16 py-8 border-t border-gray-200 dark:border-gray-700">
          <p class="text-center text-gray-600 dark:text-gray-400">
            © {new Date().getFullYear()} ちずぼ
          </p>
        </footer>
      </div>

    <style>
      .settings-tooltip {
        @apply absolute right-full mr-2 top-1/2 -translate-y-1/2 px-2 py-1 rounded bg-gray-800 text-white text-xs whitespace-nowrap opacity-0 pointer-events-none transition-opacity duration-200;
      }
    </style>

    <script>
      // Dropdown toggle
      const gearBtn = document.getElementById('settings-toggle');
      const dropdown = document.getElementById('settings-dropdown');
      if (gearBtn && dropdown) {
        gearBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          dropdown.classList.toggle('hidden');
        });
        document.addEventListener('click', (e) => {
          const target = e.target as Node;
          if (!dropdown.contains(target) && !gearBtn.contains(target)) {
            dropdown.classList.add('hidden');
          }
        });
      }

      // Theme switching
      function setTheme(theme: string) {
        if (theme === 'auto') {
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
        } else if (theme === 'dark') {
          document.documentElement.classList.add('dark');
      } else {
          document.documentElement.classList.remove('dark');
      }
        localStorage.setItem('theme', theme);
      }

      // On load, set theme
      const savedTheme = localStorage.getItem('theme') || 'auto';
      setTheme(savedTheme);

      const themeAuto = document.getElementById('theme-auto');
      if (themeAuto) {
        themeAuto.onclick = () => setTheme('auto');
      }
      const themeLight = document.getElementById('theme-light');
      if (themeLight) {
        themeLight.onclick = () => setTheme('light');
      }
      const themeDark = document.getElementById('theme-dark');
      if (themeDark) {
        themeDark.onclick = () => setTheme('dark');
      }

      // Listen for system theme changes if auto
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
        if (localStorage.getItem('theme') === 'auto') {
          setTheme('auto');
        }
      });

      // Reader mode and popups toggles (implement as needed)
      const readerToggle = document.getElementById('reader-toggle');
      if (readerToggle) {
        readerToggle.onclick = () => {
          alert('Reader mode toggled (implement logic)');
        };
      }
      const popupsToggle = document.getElementById('popups-toggle');
      if (popupsToggle) {
        popupsToggle.onclick = () => {
          alert('Popups toggled (implement logic)');
        };
      }
    </script>
  </body>
</html> 