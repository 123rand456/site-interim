---
import { SEO } from 'astro-seo';
import '../styles/global.css';
import { base } from '../utils/constants';
import Breadcrumb from '../components/Breadcrumb.astro';
import Search from '../components/Search';
import AuthButtonWrapper from '../components/AuthButtonWrapper';

interface Props {
  title?: string;
  description?: string;
  breadcrumbItems?: Array<{
    title: string;
    url: string;
    isCurrent?: boolean;
  }>;
}

const {
  title = "Chizubo's Essays and Research",
  description = 'A collection of essays on technology, science, and philosophy.',
  breadcrumbItems = [],
} = Astro.props;

// JavaScript/TypeScript code here (imports, props, etc.)
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Content Security Policy (frame-ancestors removed - only works in HTTP headers) -->
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://*.supabase.co https://*.algolia.net https://*.algolianet.com;"
    />
    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title,
          type: 'website',
          image: '/og-image.png',
        },
      }}
    />
    <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
    <!-- Header -->
    <div class="relative w-full">
      <div class="container max-w-4xl mx-auto px-4 py-8">
        <header class="mb-8">
          <nav>
            <!-- Top row: Logo + Search (mobile: row, desktop: row) -->
            <div
              class="flex flex-col md:flex-row md:justify-between md:items-center md:gap-0"
            >
              <div class="flex flex-row items-center gap-2 w-full">
                <a
                  href={base}
                  class="site-title text-2xl font-bold whitespace-nowrap"
                  >chizubo</a
                >
                <div class="flex-1">
                  <Search client:load base={base} />
                </div>
              </div>
              <!-- Nav links row (mobile: row, desktop: row, but on right) -->
              <div
                class="flex flex-row justify-between md:justify-end gap-4 items-center w-full"
              >
                <a
                  href={`${base}essays`}
                  class="nav-link hover:text-gray-600 dark:hover:text-gray-300"
                  >Essays</a
                >
                <a
                  href={`${base}about`}
                  class="nav-link hover:text-gray-600 dark:hover:text-gray-300"
                  >About</a
                >
                <a
                  href={`${base}recs`}
                  class="nav-link hover:text-gray-600 dark:hover:text-gray-300"
                  >Recs</a
                >
                <!-- <AuthButtonWrapper client:load /> -->
              </div>
            </div>
          </nav>
        </header>
      </div>
      <!-- Gear icon: bottom right on mobile, top right on desktop -->
      <div
        class="fixed bottom-4 right-4 md:top-8 md:right-8 md:bottom-auto z-50 flex flex-col items-center"
      >
        <button
          id="settings-toggle"
          class="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700"
          aria-label="Settings"
        >
          <img src={`${base}gear-icon.svg`} alt="Settings" class="h-6 w-6" />
        </button>
        <div
          id="settings-dropdown"
          class="hidden flex flex-col items-center mt-2 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 w-12 py-2"
        >
          <div class="flex flex-col items-center gap-2">
            <div class="relative group">
              <button
                id="theme-auto"
                aria-label="Auto Light/Dark"
                class="flex items-center justify-center w-8 h-8 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <img
                  src={`${base}default-theme.svg`}
                  alt="Auto"
                  class="h-5 w-5"
                />
              </button>
              <span class="settings-tooltip group-hover:opacity-100"
                >Auto Light/Dark</span
              >
            </div>
            <div class="relative group">
              <button
                id="theme-light"
                aria-label="Light"
                class="flex items-center justify-center w-8 h-8 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <img
                  src={`${base}light-theme.svg`}
                  alt="Light"
                  class="h-5 w-5"
                />
              </button>
              <span class="settings-tooltip group-hover:opacity-100">Light</span
              >
            </div>
            <div class="relative group">
              <button
                id="theme-dark"
                aria-label="Dark"
                class="flex items-center justify-center w-8 h-8 rounded hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <img src={`${base}dark-theme.svg`} alt="Dark" class="h-5 w-5" />
              </button>
              <span class="settings-tooltip group-hover:opacity-100">Dark</span>
            </div>

            <div class="relative group">
              <AuthButtonWrapper client:load />
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Breadcrumb - Full Width -->
    {breadcrumbItems.length > 0 && <Breadcrumb items={breadcrumbItems} />}

    <!-- Main Content -->
    <div class="container max-w-4xl mx-auto px-4 pb-8">
      <main class="content prose dark:prose-invert max-w-none">
        <slot />
      </main>

      <footer
        class="site-footer mt-16 py-8 border-t border-gray-200 dark:border-gray-700"
      >
        <p class="text-center text-gray-600 dark:text-gray-400">
          © {new Date().getFullYear()} ちずぼ
        </p>
      </footer>
    </div>

    <script>
      // Dropdown toggle
      const gearBtn = document.getElementById('settings-toggle');
      const dropdown = document.getElementById('settings-dropdown');
      if (gearBtn && dropdown) {
        gearBtn.addEventListener('click', e => {
          e.stopPropagation();
          dropdown.classList.toggle('hidden');
        });
        document.addEventListener('click', e => {
          const target = e.target as Node;
          if (!dropdown.contains(target) && !gearBtn.contains(target)) {
            dropdown.classList.add('hidden');
          }
        });
      }

      // Theme switching
      function setTheme(theme: string) {
        if (theme === 'auto') {
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
        } else if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        localStorage.setItem('theme', theme);
      }

      // On load, set theme
      const savedTheme = localStorage.getItem('theme') || 'auto';
      setTheme(savedTheme);

      const themeAuto = document.getElementById('theme-auto');
      if (themeAuto) {
        themeAuto.onclick = () => setTheme('auto');
      }
      const themeLight = document.getElementById('theme-light');
      if (themeLight) {
        themeLight.onclick = () => setTheme('light');
      }
      const themeDark = document.getElementById('theme-dark');
      if (themeDark) {
        themeDark.onclick = () => setTheme('dark');
      }

      // Listen for system theme changes if auto
      window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', _e => {
          if (localStorage.getItem('theme') === 'auto') {
            setTheme('auto');
          }
        });

      // Reader mode and popups toggles (implement as needed)
      const readerToggle = document.getElementById('reader-toggle');
      if (readerToggle) {
        readerToggle.onclick = () => {
          alert('Reader mode toggled (implement logic)');
        };
      }
      const popupsToggle = document.getElementById('popups-toggle');
      if (popupsToggle) {
        popupsToggle.onclick = () => {
          alert('Popups toggled (implement logic)');
        };
      }
    </script>
  </body>
</html>
